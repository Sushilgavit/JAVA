1)create a class "Shape" with 2 attributes, "width" and "height". Make sure one can not access these attributes directly.
provide accessor methods on these attributes and allow them to call from outside of your class.



public class task_1 {

	public static void main(String[] args) {
		
		Shape s1=new Shape();
		System.out.println(s1.getLength());
		System.out.println(s1.getWidth());
	}

}
class Shape
{
	private int width;
	private int length;
	public int getWidth() 
	{
		return width;
	}
	public int getLength() 
	{
		return length;
	}
}




2) Define a class "MyClass" and make sure clients can instantiate it , 
a) without any argument
b) with one int argument
c) with two int arguments




public class task_2 {

	public static void main(String [] args) 
	{
			Myclass s1=new Myclass();
			Myclass s2=new Myclass(10);
			Myclass s3=new Myclass(10,20);
	}
}
class Myclass
{
	Myclass()
	{
		System.out.println("inside Default Constructor");
	}
	Myclass(int k)
	{
		System.out.println("inside one parameter Constructor");
	}
	Myclass(int j,int k)
	{
		System.out.println("inside two parameter Constructor");
	}
}





3) Define a class "Emp" with private static member "int cnt".
How will u make sure that outsiders can read the value of cnt ?


public class task_3 {	
	public static void main(String [] args) 
	{
		System.out.println(EMP.getCnt());
	}

}
class EMP
{
	private static int cnt=10;
	public static int getCnt() 
	{
		return cnt;
	}
}


4) Define a class "DemoOb". 
create an instance of it.
now create a reference and assign the reference created in the above statement.
	Discuss what happens?
Now since u have 2 references, take one of the reference and assign a new instance of the class.
	Discuss what happens?
(For ur discussion, write necessary comments in the program)



public class task_4 {
	public static void main(String args[]) 
	{
		DemoOb obj1=new DemoOb();
		DemoOb obj2=obj1;	
		obj2=new DemoOb();
	}

}
class DemoOb
{
	DemoOb()
	{
		System.out.println("inside Default constructor");
	}
}



/*
 first we have created the reference obj1 and assign this to one object on heap and then we have
 Initialized another reference obj2 with same object and then we assign the new object on heap and 
 give reference to obj2 now it will refer to the new object and stop referring the old object
*/




5) Define 3 classes A , B and C
in all these classes create static and nonstatic variables as well as methods.
	Now Define a class "Demo" ,in which define "main" function. From this main function try to access all the members of A ,B  and C.





public class Demo{
	public static void main(String []args) 
	{
		System.out.println(A.getA());
		System.out.println(B.getB());
		System.out.println(C.getC());
		A s1=new A();
		B s2=new B();
		C s3=new C();
		System.out.println(s1.getAa());
		System.out.println(s2.getBb());
		System.out.println(s3.getCc());
	}

}
class A
{
	private static int a=10;
	private int aa;
	public static int getA() 
	{
		return a;
	}
	public int getAa() 
	{
		return aa;
	}
}
class B
{
	private static int b=20;
	private int bb;
	public static int getB() 
	{
		return b;
	}
	public int getBb() {
		return bb;
	}
}
class C
{
	private static int c=30;
	private int cc;
	public static int getC() 
	{
		return c;
	}
	public int getCc() 
	{
		return cc;
	}
}


6) define static initializers in the above A,B and C classes and check the order of their execution.



public class Demo{
	public static void main(String []args) 
	{
		System.out.println(A.getA());
		System.out.println(B.getB());
		System.out.println(C.getC());
		A s1=new A();
		B s2=new B();
		C s3=new C();
		System.out.println(s1.getAa());
		System.out.println(s2.getBb());
		System.out.println(s3.getCc());
	}

}
class A
{
	private static int a=10;
	private int aa;
	public static int getA() 
	{
		return a;
	}
	public int getAa() 
	{
		return aa;
	}
	static
	{
		System.out.println("inside Static Initialser of A");
	}
}
class B
{
	private static int b=20;
	private int bb;
	public static int getB() 
	{
		return b;
	}
	public int getBb() {
		return bb;
	}
	static
	{
		System.out.println("inside Static Initialser of B");
	}
}
class C
{
	private static int c=30;
	private int cc;
	public static int getC() 
	{
		return c;
	}
	public int getCc() 
	{
		return cc;
	}
	static
	{
		System.out.println("inside Static Initialser of C");
	}
}












